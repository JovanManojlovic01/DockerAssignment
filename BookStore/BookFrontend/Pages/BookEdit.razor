@page "/books/edit/{id:int}"
@using BookFrontend.Services
@using BookFrontend.Models
@inject BookService BookService
@inject NavigationManager GoTo

<div class="container mt-5">
    <h3 class="text-primary">Edit Book</h3>

    @if (book == null)
    {
        <div class="d-flex justify-content-center align-items-center mt-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="book" OnValidSubmit="HandleValidSubmit">
            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <InputText id="title" class="form-control" @bind-Value="book.Title" />
            </div>

            <div class="mb-3">
                <label for="author" class="form-label">Author</label>
                <InputText id="author" class="form-control" @bind-Value="book.Author" />
            </div>

            <div class="mb-3">
                <label for="year" class="form-label">Year of Release</label>
                <InputNumber id="year" class="form-control" @bind-Value="book.YearOfRelease" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="book.Description" />
            </div>

            <div class="mb-3">
                <label for="imageURL" class="form-label">Image URL</label>
                <InputText id="imageURL" class="form-control" @bind-Value="book.imageURL" />
            </div>

            <button type="submit" class="btn btn-primary">Update</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private Book book;

    protected override async Task OnInitializedAsync()
    {
        book = await BookService.GetBookByIdAsync(id);
    }

    private async Task HandleValidSubmit()
    {
        await BookService.UpdateBookAsync(book);
        GoTo.NavigateTo("/books");
    }

    private void Cancel()
    {
        GoTo.NavigateTo("/books");
    }
}